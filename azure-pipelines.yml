# ASP.NET Core

# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master

pr: none

resources:
  pipelines:
  - pipeline: MultipleArtifact
    project: 'DevOps Manual'
    source: 'kmadof.devops-manual (64)'

pool:
  vmImage: ubuntu-latest

# Versioning source: https://stackoverflow.com/a/60609868/987827
variables:
  buildConfiguration: 'Release'

stages:
- stage: build
  jobs:
    - job: BuildAndTest
      steps:
        - checkout: self
          fetchDepth: 0

        - script: echo $(version)
          displayName: 'Basic Information - Version'
          
        - script: echo $(Build.ArtifactStagingDirectory)
          displayName: 'Basic Information - ArtifactStagingDirectory'
          
        - script: pwd
          displayName: 'Basic Information - Current Directory'
          
        - script: ls -al
          displayName: 'Basic Information - Directory Contents'

        - task: gitversion/setup@0
          displayName: Install GitVersion
          inputs:
            versionSpec: '5.x'
          
        - task: gitversion/execute@0
          displayName: Determine Version
          name: determine_version
          inputs:
            useConfigFile: true
            configFilePath: 'GitVersion.yml'

        - script: |
            echo Major: $(GitVersion.Major)
            echo Minor: $(GitVersion.Minor)
            echo Patch: $(GitVersion.Patch)
            echo PreReleaseTag: $(GitVersion.PreReleaseTag)
            echo PreReleaseLabel: $(GitVersion.PreReleaseLabel)
            echo PreReleaseNumber: $(GitVersion.PreReleaseNumber)
            echo WeightedPreReleaseNumber: $(GitVersion.WeightedPreReleaseNumber)
            echo BuildMetaData: $(GitVersion.BuildMetaData)
            echo BuildMetaDataPadded: $(GitVersion.BuildMetaDataPadded)
            echo FullBuildMetaData: $(GitVersion.FullBuildMetaData)
            echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
            echo SemVer: $(GitVersion.SemVer)
            echo LegacySemVer: $(GitVersion.LegacySemVer)
            echo LegacySemVerPadded: $(GitVersion.LegacySemVerPadded)
            echo AssemblySemVer: $(GitVersion.AssemblySemVer)
            echo AssemblySemFileVer: $(GitVersion.AssemblySemFileVer)
            echo FullSemVer: $(GitVersion.FullSemVer)
            echo InformationalVersion: $(GitVersion.InformationalVersion)
            echo BranchName: $(GitVersion.BranchName)
            echo EscapedBranchName: $(GitVersion.EscapedBranchName)
            echo Sha: $(GitVersion.Sha)
            echo ShortSha: $(GitVersion.ShortSha)
            echo NuGetVersionV2: $(GitVersion.NuGetVersionV2)
            echo NuGetVersion: $(GitVersion.NuGetVersion)
            echo NuGetPreReleaseTagV2: $(GitVersion.NuGetPreReleaseTagV2)
            echo NuGetPreReleaseTag: $(GitVersion.NuGetPreReleaseTag)
            echo VersionSourceSha: $(GitVersion.VersionSourceSha)
            echo CommitsSinceVersionSource: $(GitVersion.CommitsSinceVersionSource)
            echo CommitsSinceVersionSourcePadded: $(GitVersion.CommitsSinceVersionSourcePadded)
            echo UncommittedChanges: $(GitVersion.UncommittedChanges)
            echo CommitDate: $(GitVersion.CommitDate)
          displayName: Current Version $(GitVersion.FullSemVer)

        - script: dotnet build --configuration $(buildConfiguration)
          displayName: 'dotnet build $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'dotnet test'
          inputs:
            command: 'test'
            projects: '**/*.csproj'
            publishTestResults: true
            configuration: $(buildConfiguration)

        - script: dotnet pack --version-suffix '$(GitVersion.SemVer)' -o $(Build.ArtifactStagingDirectory) --configuration $(buildConfiguration)
          displayName: 'dotnet pack'

        # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
        - task: PublishPipelineArtifact@1
          #condition: ne(variables['Build.Reason'], 'PullRequest')
          displayName: 'Publish artifacts'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)' 
            artifactName: 'drop'
            publishLocation: pipeline

# - stage: deploy_to_nuget
#   jobs:
#     - job: deployToNuget
#       variables:
#         gitVersion: $[stageDependencies.build.BuildAndTest.outputs['determine_version.GitVersion.SemVer']]
#       displayName: "deploy to nuget.org"
#       steps:
#       - task: DownloadPipelineArtifact@2
#         inputs:
#           buildType: 'current'
#           artifactName: 'drop'
#           downloadPath: '$(Pipeline.Workspace)/drop'
      
#       - script: dotnet nuget push $(Pipeline.Workspace)/drop/SparkRoseDigital.Infrastructure.$(gitVersion).nupkg --api-key $(nuget_api_key) --source https://api.nuget.org/v3/index.json
#         displayName: 'dotnet nuget push'

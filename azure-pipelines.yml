# ASP.NET Core

# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: ubuntu-latest

# Versioning source: https://stackoverflow.com/a/60609868/987827
variables:
  buildConfiguration: 'Release'
  major: '1'
  minor: '0'
  revision: $[counter(variables['minor'], 1)] # This will get reset every time minor gets bumped.
  nugetVersion: '$(major).$(minor).$(revision)'

steps:
- script: echo 'Pipeline:\sSparkRoseDigital.Infrastructure version $(nugetVersion) \n------------- Build.ArtifactStagingDirectory:\s$(Build.ArtifactStagingDirectory)'

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*.csproj'
    publishTestResults: true
    configuration: $(buildConfiguration)

- script: dotnet pack --version-suffix '$(nugetVersion)' -o $(Build.ArtifactStagingDirectory) --configuration $(buildConfiguration) # define version variable elsewhere in your pipeline
  displayName: 'dotnet pack'

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishPipelineArtifact@1
  displayName: 'Publish artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop'

# - script: dotnet nuget push $(Build.ArtifactStagingDirectory) --api-key $(nuget_api_key) --source https://api.nuget.org/v3/index.json
#   displayName: 'dotnet nuget push'

# Source: https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops&tabs=dotnetfive#publish-artifacts-to-azure-pipelines
# - task: DotNetCoreCLI@2
#   displayName: 'dotnet publish'
#   inputs:
#     command: 'publish'
#     publishWebProjects: false
#     projects: '**/*.csproj'
#     configuration: $(buildConfiguration)
#     zipAfterPublish: false

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
# - task: PublishPipelineArtifact@1
#   displayName: 'Publish artifacts'
#   inputs:
#     targetPath: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'drop'

# - task: NuGetAuthenticate@1
#   inputs:
#     nuGetServiceConnections: 'nuget-srd-infra'

# - task: NuGetCommand@2
#   inputs:
#     command: push
#     nuGetFeedType: external
#     publishFeedCredentials: 'nuget-srd-infra'
#     versioningScheme: byEnvVar
#     versionEnvVar: nugetVersion

